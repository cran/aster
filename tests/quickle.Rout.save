
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(aster)
Loading required package: trust
> 
> data(radish)
> 
> options(digits=4) # avoid rounding differences
> 
> pred <- c(0,1,2)
> fam <- c(1,3,2)
> 
> ### try reaster
> 
> rout <- reaster(resp ~ varb + fit : (Site * Region),
+     list(block = ~ 0 + fit : Block, pop = ~ 0 + fit : Pop),
+     pred, fam, varb, id, root, data = radish)
> summary(rout)

Call:
reaster.formula(fixed = resp ~ varb + fit:(Site * Region), random = list(block = ~0 + 
    fit:Block, pop = ~0 + fit:Pop), pred = pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = radish)


Fixed Effects:
                           Estimate Std. Error z value Pr(>|z|)    
(Intercept)               -467.2423     1.7518 -266.72   <2e-16 ***
varbFlowers                474.1382     1.7542  270.29   <2e-16 ***
varbFruits                 466.1103     1.7604  264.78   <2e-16 ***
fit:SitePoint Reyes         -0.0362     0.2078   -0.17     0.86    
fit:RegionS                 -0.1225     0.0789   -1.55     0.12    
fit:SiteRiverside:RegionS    0.4993     0.0121   41.22   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Square Roots of Variance Components (P-values are one-tailed):
      Estimate Std. Error z value Pr(>|z|)/2    
block   0.3282     0.0736    4.46    4.1e-06 ***
pop     0.0962     0.0299    3.21    0.00065 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> names(rout)
 [1] "obj"        "fixed"      "random"     "dropped"    "sigma"     
 [6] "nu"         "c"          "b"          "alpha"      "zwz"       
[11] "response"   "origin"     "iterations" "counts"     "formula"   
[16] "call"      
> 
> alpha.mle <- rout$alpha
> bee.mle <- rout$b
> nu.mle <- rout$sigma^2
> zwz.mle <- rout$zwz
> obj <- rout$obj
> fixed <- rout$fixed
> random <- rout$random
> alphanu.mle <- c(alpha.mle, nu.mle)
> 
> qout <- quickle(alphanu.mle, bee.mle, fixed, random, obj,
+     zwz = zwz.mle, deriv = 2)
> 
> objfun <- function(alphanu) quickle(alphanu, bee.mle, fixed, random,
+     obj, zwz = zwz.mle)$value
> gradfun <- function(alphanu) quickle(alphanu, bee.mle, fixed, random,
+     obj, zwz = zwz.mle, deriv = 1)$gradient
> oout <- optim(alphanu.mle, objfun, gradfun, method = "BFGS", hessian = TRUE)
> all.equal(qout$hessian, oout$hessian, check.attributes = FALSE,
+     tolerance = 0.002)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  3.571   0.043   3.775 
