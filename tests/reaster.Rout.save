
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(aster)
Loading required package: trust
> 
>  data(radish)
> 
>  options(digits=4) # avoid rounding differences
> 
>  pred <- c(0,1,2)
>  fam <- c(1,3,2)
> 
>  ### need object of type aster to supply to penmlogl and pickle
> 
>  aout <- aster(resp ~ varb + fit : (Site * Region),
+      pred, fam, varb, id, root, data = radish)
> 
>  ### model matrices for fixed and random effects
> 
>  modmat.fix <- model.matrix(resp ~ varb + fit : (Site * Region), data = radish)
>  modmat.blk <- model.matrix(resp ~ 0 + fit:Block, data = radish)
>  modmat.pop <- model.matrix(resp ~ 0 + fit:Pop, data = radish)
> 
>  rownames(modmat.fix) <- NULL
>  rownames(modmat.blk) <- NULL
>  rownames(modmat.pop) <- NULL
> 
>  idrop <- match(aout$dropped, colnames(modmat.fix))
>  idrop <- idrop[! is.na(idrop)]
>  modmat.fix <- modmat.fix[ , - idrop]
> 
>  nfix <- ncol(modmat.fix)
>  nblk <- ncol(modmat.blk)
>  npop <- ncol(modmat.pop)
> 
>  ### try reaster
> 
>  rout <- reaster(resp ~ varb + fit : (Site * Region),
+      list(block = ~ 0 + fit : Block, pop = ~ 0 + fit : Pop),
+      pred, fam, varb, id, root, data = radish)
>  summary(rout)

Call:
reaster.formula(fixed = resp ~ varb + fit:(Site * Region), random = list(block = ~0 + 
    fit:Block, pop = ~0 + fit:Pop), pred = pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = radish)


Fixed Effects:
                           Estimate Std. Error z value Pr(>|z|)    
(Intercept)               -467.2423     1.7518 -266.72   <2e-16 ***
varbFlowers                474.1382     1.7542  270.29   <2e-16 ***
varbFruits                 466.1103     1.7604  264.78   <2e-16 ***
fit:SitePoint Reyes         -0.0362     0.2078   -0.17     0.86    
fit:RegionS                 -0.1225     0.0789   -1.55     0.12    
fit:SiteRiverside:RegionS    0.4993     0.0121   41.22   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Square Roots of Variance Components (P-values are one-tailed):
      Estimate Std. Error z value Pr(>|z|)/2    
block   0.3282     0.0736    4.46    4.1e-06 ***
pop     0.0962     0.0299    3.21    0.00065 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
>  summary(rout, stand = FALSE)

Call:
reaster.formula(fixed = resp ~ varb + fit:(Site * Region), random = list(block = ~0 + 
    fit:Block, pop = ~0 + fit:Pop), pred = pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = radish)


Fixed Effects:
                           Estimate Std. Error z value Pr(>|z|)    
(Intercept)               -467.2423     1.7518 -266.72   <2e-16 ***
varbFlowers                474.1382     1.7542  270.29   <2e-16 ***
varbFruits                 466.1103     1.7604  264.78   <2e-16 ***
fit:SitePoint Reyes         -0.0362     0.2078   -0.17     0.86    
fit:RegionS                 -0.1225     0.0789   -1.55     0.12    
fit:SiteRiverside:RegionS    0.4993     0.0121   41.22   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Variance Components (P-values are one-tailed):
      Estimate Std. Error z value Pr(>|z|)/2  
block  0.10771    0.04830    2.23      0.013 *
pop    0.00925    0.00576    1.61      0.054 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
>  class(rout)
[1] "reaster.formula" "reaster"        
>  names(rout)
 [1] "obj"        "fixed"      "random"     "dropped"    "sigma"     
 [6] "nu"         "c"          "b"          "alpha"      "zwz"       
[11] "response"   "origin"     "iterations" "counts"     "formula"   
[16] "call"      
> 
>  identical(modmat.fix, rout$fixed)
[1] TRUE
>  identical(list(block = modmat.blk, pop = modmat.pop), rout$random)
[1] TRUE
>  class(aout)
[1] "aster.formula" "aster"        
>  class(rout$obj)
[1] "aster"
>  foo <- rep(NA, length(rout$obj))
>  names(foo) <- names(rout$obj)
>  for (n in names(rout$obj))
+      foo[n] <- identical(aout[[n]], rout$obj[[n]])
>  foo
coefficients         iter    converged     deviance     gradient      hessian 
        TRUE         TRUE         TRUE         TRUE         TRUE         TRUE 
      newton         rank            x         root         pred          fam 
        TRUE         TRUE        FALSE        FALSE         TRUE         TRUE 
      modmat         type      famlist       fisher      dropped       origin 
       FALSE         TRUE         TRUE         TRUE         TRUE         TRUE 
> 
>  foo <- aout$x
>  is.matrix(foo)
[1] TRUE
>  dimnames(foo) <- NULL
>  identical(foo, rout$obj$x)
[1] TRUE
>  foo <- aout$root
>  is.matrix(foo)
[1] TRUE
>  dimnames(foo) <- NULL
>  identical(foo, rout$obj$root)
[1] TRUE
>  foo <- aout$modmat
>  is.array(foo)
[1] TRUE
>  dimnames(foo) <- list(NULL, NULL, dimnames(foo)[[3]])
>  identical(foo, rout$obj$modmat)
[1] TRUE
> 
>  alpha.mle <- rout$alpha
>  sigma.mle <- rout$sigma
>  c.mle <- rout$c
>  fixed <- rout$fixed
>  random <- rout$random
>  bee.mle <- rout$b
>  nu.mle <- rout$nu
> 
>  zwz.mle <- makezwz(sigma.mle, c(alpha.mle, c.mle), fixed = fixed,
+      random = random, obj = rout$obj)
>  identical(zwz.mle, rout$zwz)
[1] TRUE
> 
>  qout <- quickle(c(alpha.mle, nu.mle), bee.mle, fixed = fixed,
+      random = random, obj = rout$obj, zwz = zwz.mle, deriv = 2)
>  sout <- summary(rout)
>  identical(qout$hessian, sout$fish)
[1] TRUE
> 
>  # now check standard error calculations in summary.reaster
> 
>  fish.inv <- solve(sout$fish)
>  se.parm <- sqrt(diag(fish.inv))
>  se.alpha <- se.parm[seq(along = se.parm) <= nfix]
>  se.nu <- se.parm[seq(along = se.parm) > nfix]
>  identical(se.alpha, as.vector(sout$alpha[ , 2]))
[1] TRUE
>  identical(se.nu, as.vector(sout$nu[ , 2]))
[1] TRUE
>  identical(se.nu / (2 * sigma.mle), sout$sigma[ , 2])
[1] TRUE
> 
>  eps <- 1e-4
>  npoin <- 9
>  stopifnot(npoin %% 2 == 1)
>  alphanu.mle <- c(alpha.mle, nu.mle)
>  bsp <- matrix(NA_real_, nrow = length(bee.mle), ncol = length(alphanu.mle))
>  for (i in seq(along = alphanu.mle)) {
+      blurfle <- matrix(NA_real_, nrow = length(bee.mle), ncol = npoin)
+      foo <- alphanu.mle
+      bar <- double(npoin)
+      for (j in 1:npoin) {
+          foo[i] <- alphanu.mle[i] + (j - (npoin + 1) / 2) * eps
+          bar[j] <- foo[i]
+          qout <- quickle(foo, bee.mle, fixed = fixed,
+              random = random, obj = rout$obj, zwz = zwz.mle)
+          blurfle[ , j] <- qout$bee
+      }
+      for (j in seq(along = bee.mle)) {
+          surfle <- splinefun(bar, blurfle[j, ], method = "natural")
+          bsp[j, i] <- surfle(alphanu.mle[i], deriv = 1)
+      }
+  }
> 
>  qout <- quickle(c(alpha.mle, nu.mle), bee.mle, fixed = fixed,
+      random = random, obj = rout$obj, zwz = zwz.mle, deriv = 2)
>  bsp2 <- with(qout, pbb.inv %*% cbind(pba, pbn))
>  all.equal(- bsp, bsp2, tol = 5e-6)
[1] "Mean relative difference: 2.436e-05"
> 
>  ### try reaster with no data frame
> 
>  y <- radish$resp
>  v <- radish$varb
>  f <- radish$fit
>  s <- radish$Site
>  r <- radish$Region
>  b <- radish$Block
>  p <- radish$Pop
>  i <- radish$id
>  rt <- radish$root
>  rout <- reaster(y ~ v + f : (s * r),
+      list(block = ~ 0 + f : b, pop = ~ 0 + f : p),
+      pred, fam, v, i, rt)
>  summary(rout)

Call:
reaster.formula(fixed = y ~ v + f:(s * r), random = list(block = ~0 + 
    f:b, pop = ~0 + f:p), pred = pred, fam = fam, varvar = v, 
    idvar = i, root = rt)


Fixed Effects:
                 Estimate Std. Error z value Pr(>|z|)    
(Intercept)     -467.2423     1.7518 -266.72   <2e-16 ***
vFlowers         474.1382     1.7542  270.29   <2e-16 ***
vFruits          466.1103     1.7604  264.78   <2e-16 ***
f:sPoint Reyes    -0.0362     0.2078   -0.17     0.86    
f:rS              -0.1225     0.0789   -1.55     0.12    
f:sRiverside:rS    0.4993     0.0121   41.22   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Square Roots of Variance Components (P-values are one-tailed):
      Estimate Std. Error z value Pr(>|z|)/2    
block   0.3282     0.0736    4.46    4.1e-06 ***
pop     0.0962     0.0299    3.21    0.00065 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> 
> proc.time()
   user  system elapsed 
  7.092   0.052   7.294 
