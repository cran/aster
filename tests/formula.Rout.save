
R : Copyright 2006, The R Foundation for Statistical Computing
Version 2.3.1 (2006-06-01)
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(aster)
Loading required package: trust
> 
>  set.seed(42)
> 
>  nind <- 25
> 
>  vars <- c("l2", "l3", "f2", "f3", "h2", "h3")
>  pred <- c(0, 1, 1, 2, 3, 4)
>  fam <- c(1, 1, 1, 1, 3, 3)
>  length(pred) == length(fam)
[1] TRUE
>  nnode <- length(pred)
> 
>  theta <- matrix(0, nind, nnode)
>  root <- matrix(1, nind, nnode)
>  x <- raster(theta, pred, fam, root)
>  dimnames(x) <- list(NULL, vars)
> 
>  data <- as.data.frame(x)
>  site <- factor(sample(LETTERS[1:4], nind, replace = TRUE))
>  foo <- rnorm(nind)
>  data <- data.frame(x, site = site, foo = foo, root = 1)
> 
>  redata <- reshape(data, varying = list(vars),
+      direction = "long", timevar = "varb", times = as.factor(vars),
+      v.names = "resp")
> 
>  out <- aster(resp ~ foo + site, pred, fam, varb, id, root, data = redata)
>  summary(out, show.graph = TRUE)

Call:
aster.formula(formula = resp ~ foo + site, pred = pred, fam = fam, 
    varvar = varb, idvar = id, root = root, data = redata)


Graphical Model:
 variable predecessor family                           
 l2       root        bernoulli                        
 l3       l2          bernoulli                        
 f2       l2          bernoulli                        
 f3       l3          bernoulli                        
 h2       f2          truncated.poisson(truncation = 0)
 h3       f3          truncated.poisson(truncation = 0)

            Estimate Std. Error z value Pr(>|z|)
(Intercept)  0.22159    0.17989   1.232    0.218
foo          0.06391    0.09765   0.654    0.513
siteB        0.11451    0.23367   0.490    0.624
siteC       -0.21376    0.21731  -0.984    0.325
siteD       -0.29981    0.31459  -0.953    0.341
> 
>  out <- aster(resp ~ foo + site + varb, pred, fam, varb, id, root,
+      data = redata)
>  summary(out)

Call:
aster.formula(formula = resp ~ foo + site + varb, pred = pred, 
    fam = fam, varvar = varb, idvar = id, root = root, data = redata)

            Estimate Std. Error z value Pr(>|z|)  
(Intercept)  1.65073    0.99528   1.659   0.0972 .
foo          0.07857    0.10960   0.717   0.4735  
siteB        0.14573    0.26619   0.547   0.5841  
siteC       -0.25967    0.24569  -1.057   0.2906  
siteD       -0.35936    0.35182  -1.021   0.3070  
varbf3      -0.96858    1.43012  -0.677   0.4982  
varbh2      -2.49200    1.60196  -1.556   0.1198  
varbh3      -1.53971    1.09216  -1.410   0.1586  
varbl2      -1.02810    1.24891  -0.823   0.4104  
varbl3      -1.65561    1.19680  -1.383   0.1666  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 
>  out0 <- aster(resp ~ foo + site + varb, pred, fam, varb, id, root,
+      origin = rep(0, nind * nnode), data = redata)
>  summary(out0)

Call:
aster.formula(formula = resp ~ foo + site + varb, pred = pred, 
    fam = fam, varvar = varb, idvar = id, root = root, data = redata, 
    origin = rep(0, nind * nnode))

            Estimate Std. Error z value Pr(>|z|)
(Intercept)  1.10940    0.99528   1.115    0.265
foo          0.07857    0.10960   0.717    0.473
siteB        0.14573    0.26619   0.547    0.584
siteC       -0.25967    0.24569  -1.057    0.291
siteD       -0.35936    0.35182  -1.021    0.307
varbf3      -0.96858    1.43012  -0.677    0.498
varbh2      -1.95067    1.60196  -1.218    0.223
varbh3      -0.99839    1.09216  -0.914    0.361
varbl2      -1.87307    1.24891  -1.500    0.134
varbl3      -1.80743    1.19680  -1.510    0.131
> 
>  ncoef <- length(out$coefficients)
>  foo <- as.numeric(out0$origin) +
+      matrix(out0$modmat, ncol = ncoef) %*% out0$coefficients
>  bar <- as.numeric(out$origin) +
+      matrix(out$modmat, ncol = ncoef) %*% out$coefficients
>  all.equal(foo, bar)
[1] TRUE
> 
>  all.equal(out$fisher, out0$fisher)
[1] TRUE
>  identical(out$modmat, out0$modmat)
[1] TRUE
> 
>  all.equal(summary(out)$coefficients[ , "Std. Error"],
+      summary(out0)$coefficients[ , "Std. Error"])
[1] TRUE
> 
> 
